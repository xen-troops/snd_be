/*
 *  Config
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Copyright (C) 2016 EPAM Systems Inc.
 */

#ifndef SRC_CONFIG_HPP_
#define SRC_CONFIG_HPP_

#include <memory>

#include <libconfig.h++>

#include <xen/be/Log.hpp>

#include "SoundItf.hpp"

/***************************************************************************//**
 * @defgroup config Config
 * Config related classes.
 ******************************************************************************/

/***************************************************************************//**
 * Exception generated by Config class.
 * @ingroup config
 ******************************************************************************/
class ConfigException : public std::exception
{
public:

	explicit ConfigException(const std::string& msg) : mMsg(msg) {};
	virtual ~ConfigException() {}

	/**
	 * returns error message
	 */
	const char* what() const throw() { return mMsg.c_str(); };

private:
	std::string mMsg;
};

/***************************************************************************//**
 * Provides different settings for backends.
 * @ingroup config
 ******************************************************************************/
class Config
{
public:

	/**
	 * @param fileName
	 */
	Config(const std::string& fileName);

	/**
	 * Returns PCM type
	 */
	SoundItf::PcmType getPcmType() const { return mPcmType; }

	/**
	 * Returns device name for stream
	 */
	std::string getStreamDevice(SoundItf::StreamType type, uint32_t id);

	/**
	 * Returns stream property
	 */
	void getStreamPropery(SoundItf::StreamType type, uint32_t id,
						  std::string& name, std::string& value);

private:

	const char* cDefaultCfgName = "snd_be.cfg";

	XenBackend::Log mLog;
	libconfig::Config mConfig;

	SoundItf::PcmType mPcmType;
	std::string mDefaultPlaybackDevice;
	std::string mDefaultCaptureDevice;
	std::string mDefaultPlaybackPropName;
	std::string mDefaultCapturePropName;

	void initCachedValues();
	SoundItf::PcmType readPcmType();
	std::string readDefaultPlaybackDevice();
	std::string readDefaultCaptureDevice();
	std::string readDefaultPlaybackPropName();
	std::string readDefaultCapturePropName();

	std::string readDevice(const std::string& sectionName, uint32_t id,
						   const std::string& defaultValue);

	void readProperty(const std::string& sectionName, uint32_t id,
					  std::string& name, std::string& value,
					  const std::string& defaultPropName);
	/*
	readProperty(const std::string& sectionName, uint32_t id);
*/
	libconfig::Setting& findSettingByDomain(const std::string& sectionName,
											const std::string& domName,
											uint16_t devId);
};

#endif /* SRC_CONFIG_HPP_ */
