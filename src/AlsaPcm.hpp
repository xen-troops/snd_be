/*
 *  Alsa pcm device wrapper
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Copyright (C) 2016 EPAM Systems Inc.
 */

#ifndef SRC_ALSAPCM_HPP_
#define SRC_ALSAPCM_HPP_

#include <string>

#include <alsa/asoundlib.h>

#include <xen/be/Log.hpp>

namespace Alsa {

/***************************************************************************//**
 * @defgroup alsa
 * Alsa related classes.
 ******************************************************************************/

/**
 * Specifies stream type
 * @ingroup alsa
 */
enum class StreamType {PLAYBACK, CAPTURE};

/***************************************************************************//**
 * Exception generated by AlsaPcm.
 * @ingroup alsa
 ******************************************************************************/
class AlsaPcmException : public std::exception
{
public:
	/**
	 * @param msg error message
	 */
	explicit AlsaPcmException(const std::string& msg) : mMsg(msg) {};

	/**
	 * returns error message
	 */
	const char* what() const throw() { return mMsg.c_str(); };

private:
	std::string mMsg;
};

/***************************************************************************//**
 * Describes pcm parameters.
 * @ingroup alsa
 ******************************************************************************/
struct AlsaPcmParams
{
	/**
	 * @param f pcm format
	 * @param r rate
	 * @param c number of channels
	 */
	AlsaPcmParams(snd_pcm_format_t f, unsigned r, unsigned c) :
		format(f), rate(r), numChannels(c) {}

	snd_pcm_format_t	format;			//!< pcm format
	unsigned			rate;			//!< rate in Hz
	unsigned			numChannels;	//!< number of channels
};

/***************************************************************************//**
 * Provides alsa pcm functionality.
 * @ingroup alsa
 ******************************************************************************/
class AlsaPcm
{
public:
	/**
	 * @param type stream type
	 * @param name pcm device name
	 */
	explicit AlsaPcm(StreamType type, const std::string& name = "default");
	~AlsaPcm();

	/**
	 * Opens the pcm device.
	 * @param params pcm parameters
	 */
	void open(const AlsaPcmParams& params);

	/**
	 * Closes the pcm device.
	 */
	void close();

	/**
	 * Reads data from the pcm device.
	 * @param buffer buffer where to put data
	 * @param size   number of bytes to read
	 */
	void read(uint8_t* buffer, ssize_t size);

	/**
	 * Writes data to the pcm device.
	 * @param buffer buffer with data
	 * @param size   number of bytes to write
	 */
	void write(uint8_t* buffer, ssize_t size);

private:
	snd_pcm_t *mHandle;
	std::string mName;
	StreamType mType;
	XenBackend::Log mLog;
};

}

#endif /* SRC_ALSAPCM_HPP_ */
